import numpy as np

print("Array Oluşturma")
print("Dizi oluşturmak için farklı yöntemler mevcut. Standart Python list ve tuple'larını array fonksiyonu kullanarak dizi yapabilirsiniz.")
print("a = np.array((0,15,30,45,60,90))")
print("*****************")
print("To create sequences of numbers, NumPy provides a function analogous to range that returns arrays instead of lists.")
print("b = np.arange(6) || b2 = np.arange(10,30,5)")

a = np.array((0,15,30,45,60,90))
b = np.arange(6)
b2 = np.arange(10,30,5)
x = np.arange(15).reshape(3,5)
y = np.arange(15).reshape(3,5)
z = x*y
c = a*b
d = b**3
print("Dizinin tipini belirterekte oluşturabilirsiniz. Örneğin complex (Numeric Python demiştiler)")
ji = np.array([[43,34],[1,2]], dtype=complex)
print(ji)
print("*****************")
print("Uygulamalar")
print("*****************")
print("zeros tüm elemanları sıfır olan bir dizi oluşturur.")
print(np.zeros((6,7)))
print("empty creates an array whose initial content is random and depends on the state of the memory")
print(np.empty((3,2)))
print("By default, the dtype of the created array is float64.")
print("*****************")
print(c)
print(d)
print("*****************")
print("Item Size(C): " + str(c.itemsize))
print("Dimension Type(D): " + str(d.dtype))
print("Type of Dimension Type(D): " + str(d.dtype.type))
print("*****************")
print("dtype: Numeric 'type' of elements")
print(a.dtype)
print("*****************")
print("itemsize: bytes per elements")
print(a.itemsize)
print("*****************")
print("nbytes : total byte of array")
print(a.nbytes)
print("*****************")
print("shape : returns a tuple listing the length of the array along each dimension")
print(np.shape(a))
print(a.shape)
print("*****************")
print("Size: reports the entire number of elements in an array")
print(a.size)
print(np.size(a))
print("*****************")
print("ndim: the number of dimensions of the array.")
print(z.ndim)
print("*****************")
print("data: the buffer containing the actual elements of the array. Normally, you won’t need to use this attribute because you will access the elements in an array using indexing facilities.")
print(a.data)
print("*****************")
print("Dizileri Yazdırma")
print("*****************")
A = np.array([[1,1],[0,1]])
B = np.array([[2,0],[3,4]])

qwe = np.array([20,30,40,50])
rty = np.arange(4)
print(A*B)  # elementwise product
print(A@B)  # matrix product
print(A.dot(B)) # another matrix product
print("*****************")
print(A.ndim)
print(rty)
print(qwe*rty) # elementwise, martisler çarpımı
print(qwe@rty) # matrix product, matrisler çarpımı işleminin toplam sonucu
print(sum(A@B))
print(sum(qwe))
print(qwe.min())
print(min(qwe))
print(B.max())
print("*****************")
print("*****************")
print("*****************")
print("*****************")